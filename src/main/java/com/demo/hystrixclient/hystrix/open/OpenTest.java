package com.demo.hystrixclient.hystrix.open;

import com.netflix.config.ConfigurationManager;
import com.netflix.hystrix.HystrixCommand;
import com.netflix.hystrix.HystrixCommandGroupKey;
import com.netflix.hystrix.HystrixCommandProperties;

/**
 * OpenTest
 * 测试打开断路器
 * @author 10905 2019/1/31
 * @version 1.0
 */
public class OpenTest {
    static class MyCommand extends HystrixCommand<String>{


        protected MyCommand() {
            /**
             * 设置超时时间为500毫秒
             */
            super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey("ExampleGroup"))
            .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()
            .withExecutionTimeoutInMilliseconds(500))
            );
        }

        @Override
        protected String run() throws Exception {
//            模拟延时大于500毫秒
            Thread.sleep(800);
            return "";
        }

        @Override
        protected String getFallback() {
            System.out.println("进入getFallback--------");
            return "";
        }
    }
    public static void main(String[] args) {
        /**
         * 10秒内有10个请求符合第一个条件
         */
        ConfigurationManager.getConfigInstance().setProperty("hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds",10000);
        ConfigurationManager.getConfigInstance().setProperty("hystrix.command.default.circuitBreaker.requestVolumeThreshold",10);
        ConfigurationManager.getConfigInstance().setProperty("hystrix.command.default.circuitBreaker.errorThresholdPercentage",50);

        for (int i = 0; i < 15; i++) {
            MyCommand myCommand=new MyCommand();
            myCommand.execute();
//            判断开启条件
            if (myCommand.isCircuitBreakerOpen()){
                System.out.println("断路器开启: 执行   "+(i+1)+"   个命令");
            }

        }
    }
}
